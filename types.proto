syntax = "proto3";
package base_backend;

// Panel Config
enum BaseType {
    Unknown = 0;
    TripleOmniWheelLRDriver = 1;
    SteeringWheelPrototype = 2;
    Mark1DiffBBDriver = 3;
}

enum Language {
    English = 0;
    Chinese = 1;
}

message WiFiConfigAP {
    string ssid = 1;
    string password = 2;
}

message WiFiConfigSTA {
    string ssid = 1;
    string password = 2;
}

message ETHConfigDHCPClient{
    
}

message ETHConfigStaticIP{
    string ip = 1;
    string netmask = 2;
    optional string gateway = 3;
    optional string dns = 4;
}

message NetworkConfig {
    oneof eth_config{
        ETHConfigDHCPClient dhcp = 1;
        ETHConfigStaticIP static_ip = 2;
    }
    oneof wifi_config{
        WiFiConfigAP ap = 11;
        WiFiConfigSTA sta = 12;
    }
}

message PanelConfig {
    Language language = 1;
    BaseType base_type = 2;
    NetworkConfig network = 3;
}

message PanelConstants{
    bytes uid = 1;
    string git_hash = 2;
    string build_time = 3;
}

// Motor
message MotorTarget{
    oneof target{
        double torque = 1;  // Nm
        double speed = 2;   // rad/s
    }
}

enum MotorError{
    CommunicationError = 0;
    OverCurrent = 1;
    OverVoltage = 2;
    UnderVoltage = 3;
    MotorOverTemperature = 4;
    DriverOverTemperature = 5;
    GeneralError = 6;
}

message MotorStatus {
    // Nm
    double torque = 2; 
    // rad/s, clockwise is positive
    double speed = 3;
    // encoder position
    int64 position = 4;
    // Number of pulses per rotation
    int64 pulse_per_rotation = 5;
    double wheel_radius = 6;

    repeated MotorError error = 7;
    MotorTarget currnet_target = 8;

    optional float driver_temperature = 11;
    optional float motor_temperature = 12;
    // current suppiled voltage
    optional float voltage = 13;
}

// Base State
enum BaseState {
    Parked = 0;
    AlgrithmControl = 1;
    OvertakeSpeedControl = 2;
    OvertakeZeroResistanceControl = 3;
    EmergencyStop = 4;
}

enum EmergencyStopCategory {
    EmergencyStopButton = 0;
    MotorHasError = 1;
    BatteryFail = 2;
    GamepadTriggered = 3;
    UnknownEmergencyStopCategory = 4;
}

message EmergencyStopDetail {
    string reason = 1;
    EmergencyStopCategory category = 2;
    bool is_remotely_clearable = 3;
}

message BaseStatus {
    BaseType type = 1;
    BaseState state = 2;

    // Weather the API control is initialized.
    bool api_control_initialized = 3;
    float battery_voltage = 4;                  // V
    uint32 battery_thousandth = 5;             // 1/1000

    optional EmergencyStopDetail emergency_stop_detail = 12;
    optional string warning_reason = 14;
}

message PanelCommand {
    oneof command{
        bool reset_all_settings = 1;
        bool reset_network_settings = 2;
        PanelConfig config = 3;
    }
}

message BaseCommand {
    oneof command{
        // Only after api_control_initialize is set, can the vehicle be controlled by the API.
        bool api_control_initialize = 1;
        // If currently has a clearable emergency stop, the emergency stop state will be cleared.
        bool clear_emergency_stop = 2;
        // By sending this, will trigger a remote clearable emergency stop with this detail. is_remotely_clearable MUST be true. 
        EmergencyStopDetail trigger_emergency_stop = 3;
    }
    repeated MotorTarget motor_target = 11;
}

message GamepadRead {
    float left_stick_x = 1;
    float left_stick_y = 2;
    float right_stick_x = 3;
    float right_stick_y = 4;
    bool left_bumper = 5;
    bool right_bumper = 6;
    float left_trigger = 7;
    float right_trigger = 8;
    bool a_button = 9;
    bool b_button = 10;
    bool x_button = 11;
    bool y_button = 12;
    bool select_button = 13;
    bool start_button = 14;
    bool left_stick_button = 15;
    bool right_stick_button = 16;
    bool dpad_up = 17;
    bool dpad_down = 18;
    bool dpad_left = 19;
    bool dpad_right = 20;
}
